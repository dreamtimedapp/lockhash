{"remainingRequest":"/root/lockhash/web-app/node_modules/thread-loader/dist/cjs.js!/root/lockhash/web-app/node_modules/babel-loader/lib/index.js!/root/lockhash/web-app/node_modules/eslint-loader/index.js??ref--13-0!/root/lockhash/web-app/src/vuex/vuex.js","dependencies":[{"path":"/root/lockhash/web-app/src/vuex/vuex.js","mtime":1553930101455},{"path":"/root/lockhash/web-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/root/lockhash/web-app/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/root/lockhash/web-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/root/lockhash/web-app/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _toConsumableArray from \"/root/lockhash/web-app/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/root/lockhash/web-app/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _objectSpread from \"/root/lockhash/web-app/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _Object$keys from \"/root/lockhash/web-app/node_modules/@babel/runtime-corejs2/core-js/object/keys\";\nimport { vuex as Auth } from '$modules/auth';\nimport { isFunction } from 'lodash'; // start extraction data from vuex modules\n\nvar vuex = {\n  Auth: Auth\n};\n\nvar keys = _Object$keys(vuex); // process and extract data (modules and plugins)\n\n/**\n * this is a full functional approach\n * this code use reduce end immutability with spread operator to generate new object and array\n * refs\n * - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\n * - https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Spread_operator\n * - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\n *\n * Immutability is very important concept from functional programming, that's prevents side effects\n * Together with the syntax of arrow function make the code more concise\n *\n * plugins have additional treatment, with `.filter`, because not every module has plugins\n */\n\n\nvar modules = keys.reduce(function (acc, key) {\n  return _objectSpread({}, acc, _defineProperty({}, key, vuex[key].module));\n}, {});\nvar plugins = keys.reduce(function (acc, key) {\n  return [].concat(_toConsumableArray(acc), [vuex[key].plugin]);\n}, []).filter(isFunction);\n/**\n * semi-functional version\n * const modules = keys.reduce((acc, key) => {\n *   acc[key] = vuex[key].module\n *   return acc // without immutability\n *   return { ...acc } // with immutability\n * }, {})\n *\n * const plugins = keys.reduce((acc, key) => {\n *   acc.push(vuex[key].plugins)\n *   return acc // without immutability\n *   return [...acc] // with immutability\n * }).filter(plugin => isFunction(plugin))\n */\n// end of extraction\n// Shorthand for ‘modules: modules’\n\nexport default {\n  modules: modules,\n  plugins: plugins\n};",{"version":3,"sources":["/root/lockhash/web-app/src/vuex/vuex.js"],"names":["vuex","Auth","isFunction","keys","modules","reduce","acc","key","module","plugins","plugin","filter"],"mappings":";;;;AAAA,SAASA,IAAI,IAAIC,IAAjB,QAA6B,eAA7B;AACA,SAASC,UAAT,QAA2B,QAA3B,C,CAEA;;AACA,IAAMF,IAAI,GAAG;AAAEC,EAAAA,IAAI,EAAJA;AAAF,CAAb;;AACA,IAAME,IAAI,GAAG,aAAYH,IAAZ,CAAb,C,CAEA;;AACA;;;;;;;;;;;;;;;AAaA,IAAMI,OAAO,GAAGD,IAAI,CAACE,MAAL,CAAY,UAACC,GAAD,EAAMC,GAAN;AAAA,2BAAoBD,GAApB,sBAA0BC,GAA1B,EAAgCP,IAAI,CAACO,GAAD,CAAJ,CAAUC,MAA1C;AAAA,CAAZ,EAAiE,EAAjE,CAAhB;AACA,IAAMC,OAAO,GAAGN,IAAI,CAACE,MAAL,CAAY,UAACC,GAAD,EAAMC,GAAN;AAAA,sCAAkBD,GAAlB,IAAuBN,IAAI,CAACO,GAAD,CAAJ,CAAUG,MAAjC;AAAA,CAAZ,EAAsD,EAAtD,EAA0DC,MAA1D,CAAiET,UAAjE,CAAhB;AACA;;;;;;;;;;;;;;AAcA;AACA;;AACA,eAAe;AAAEE,EAAAA,OAAO,EAAPA,OAAF;AAAWK,EAAAA,OAAO,EAAPA;AAAX,CAAf","sourcesContent":["import { vuex as Auth } from '$modules/auth'\nimport { isFunction } from 'lodash'\n\n// start extraction data from vuex modules\nconst vuex = { Auth }\nconst keys = Object.keys(vuex)\n\n// process and extract data (modules and plugins)\n/**\n * this is a full functional approach\n * this code use reduce end immutability with spread operator to generate new object and array\n * refs\n * - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\n * - https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Spread_operator\n * - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\n *\n * Immutability is very important concept from functional programming, that's prevents side effects\n * Together with the syntax of arrow function make the code more concise\n *\n * plugins have additional treatment, with `.filter`, because not every module has plugins\n */\nconst modules = keys.reduce((acc, key) => ({ ...acc, [key]: vuex[key].module }), {})\nconst plugins = keys.reduce((acc, key) => [...acc, vuex[key].plugin], []).filter(isFunction)\n/**\n * semi-functional version\n * const modules = keys.reduce((acc, key) => {\n *   acc[key] = vuex[key].module\n *   return acc // without immutability\n *   return { ...acc } // with immutability\n * }, {})\n *\n * const plugins = keys.reduce((acc, key) => {\n *   acc.push(vuex[key].plugins)\n *   return acc // without immutability\n *   return [...acc] // with immutability\n * }).filter(plugin => isFunction(plugin))\n */\n// end of extraction\n// Shorthand for ‘modules: modules’\nexport default { modules, plugins }\n"]}]}