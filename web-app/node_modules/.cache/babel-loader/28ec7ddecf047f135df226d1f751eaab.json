{"remainingRequest":"/root/lockhash/web-app/node_modules/thread-loader/dist/cjs.js!/root/lockhash/web-app/node_modules/babel-loader/lib/index.js!/root/lockhash/web-app/node_modules/eslint-loader/index.js??ref--13-0!/root/lockhash/web-app/src/components/editor/inline-attachment.js","dependencies":[{"path":"/root/lockhash/web-app/src/components/editor/inline-attachment.js","mtime":1553930101455},{"path":"/root/lockhash/web-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/root/lockhash/web-app/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/root/lockhash/web-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/root/lockhash/web-app/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _typeof from \"/root/lockhash/web-app/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\nimport _Date$now from \"/root/lockhash/web-app/node_modules/@babel/runtime-corejs2/core-js/date/now\";\nimport \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.replace\";\n\n/* jslint newcap: true */\n\n/* global XMLHttpRequest: false, FormData: false */\n\n/*\n * Inline Text Attachment\n *\n * Author: Roy van Kaathoven\n * Contact: ik@royvankaathoven.nl\n */\n(function (document, window) {\n  'use strict';\n\n  var inlineAttachment = function inlineAttachment(options, instance) {\n    this.settings = inlineAttachment.util.merge(options, inlineAttachment.defaults);\n    this.editor = instance;\n    this.filenameTag = '{filename}';\n    this.lastValue = null;\n  };\n  /**\n   * Will holds the available editors\n   *\n   * @type {Object}\n   */\n\n\n  inlineAttachment.editors = {};\n  /**\n   * Utility functions\n   */\n\n  inlineAttachment.util = {\n    /**\n     * Simple function to merge the given objects\n     *\n     * @param {Object[]} object Multiple object parameters\n     * @returns {Object}\n     */\n    merge: function merge() {\n      var result = {};\n\n      for (var i = arguments.length - 1; i >= 0; i--) {\n        var obj = arguments[i];\n\n        for (var k in obj) {\n          if (obj.hasOwnProperty(k)) {\n            result[k] = obj[k];\n          }\n        }\n      }\n\n      return result;\n    },\n\n    /**\n     * Append a line of text at the bottom, ensuring there aren't unnecessary newlines\n     *\n     * @param {String} appended Current content\n     * @param {String} previous Value which should be appended after the current content\n     */\n    appendInItsOwnLine: function appendInItsOwnLine(previous, appended) {\n      return (previous + '\\n\\n[[D]]' + appended).replace(/(\\n{2,})\\[\\[D\\]\\]/, '\\n\\n').replace(/^(\\n*)/, '');\n    },\n\n    /**\n     * Inserts the given value at the current cursor position of the textarea element\n     *\n     * @param  {HtmlElement} el\n     * @param  {String} value Text which will be inserted at the cursor position\n     */\n    insertTextAtCursor: function insertTextAtCursor(el, text) {\n      var scrollPos = el.scrollTop;\n      var strPos = 0;\n      var browser = false;\n      var range;\n\n      if (el.selectionStart || el.selectionStart === '0') {\n        browser = 'ff';\n      } else if (document.selection) {\n        browser = 'ie';\n      }\n\n      if (browser === 'ie') {\n        el.focus();\n        range = document.selection.createRange();\n        range.moveStart('character', -el.value.length);\n        strPos = range.text.length;\n      } else if (browser === 'ff') {\n        strPos = el.selectionStart;\n      }\n\n      var front = el.value.substring(0, strPos);\n      var back = el.value.substring(strPos, el.value.length);\n      el.value = front + text + back;\n      strPos = strPos + text.length;\n\n      if (browser === 'ie') {\n        el.focus();\n        range = document.selection.createRange();\n        range.moveStart('character', -el.value.length);\n        range.moveStart('character', strPos);\n        range.moveEnd('character', 0);\n        range.select();\n      } else if (browser === 'ff') {\n        el.selectionStart = strPos;\n        el.selectionEnd = strPos;\n        el.focus();\n      }\n\n      el.scrollTop = scrollPos;\n    }\n    /**\n     * Default configuration options\n     *\n     * @type {Object}\n     */\n\n  };\n  inlineAttachment.defaults = {\n    /**\n     * URL where the file will be send\n     */\n    uploadUrl: 'upload_attachment.php',\n\n    /**\n     * Which method will be used to send the file to the upload URL\n     */\n    uploadMethod: 'POST',\n\n    /**\n     * Name in which the file will be placed\n     */\n    uploadFieldName: 'file',\n\n    /**\n     * Extension which will be used when a file extension could not\n     * be detected\n     */\n    defaultExtension: 'png',\n\n    /**\n     * JSON field which refers to the uploaded file URL\n     */\n    jsonFieldName: 'filename',\n\n    /**\n     * Allowed MIME types\n     */\n    allowedTypes: ['image/jpeg', 'image/png', 'image/jpg', 'image/gif'],\n\n    /**\n     * Text which will be inserted when dropping or pasting a file.\n     * Acts as a placeholder which will be replaced when the file is done with uploading\n     */\n    progressText: '![Uploading file...]()',\n\n    /**\n     * When a file has successfully been uploaded the progressText\n     * will be replaced by the urlText, the {filename} tag will be replaced\n     * by the filename that has been returned by the server\n     */\n    urlText: '![file]({filename})',\n\n    /**\n     * Text which will be used when uploading has failed\n     */\n    errorText: 'Error uploading file',\n\n    /**\n     * Extra parameters which will be send when uploading a file\n     */\n    extraParams: {},\n\n    /**\n     * Extra headers which will be send when uploading a file\n     */\n    extraHeaders: {},\n\n    /**\n     * Before the file is send\n     */\n    beforeFileUpload: function beforeFileUpload() {\n      return true;\n    },\n\n    /**\n     * Triggers when a file is dropped or pasted\n     */\n    onFileReceived: function onFileReceived() {},\n\n    /**\n     * Custom upload handler\n     *\n     * @return {Boolean} when false is returned it will prevent default upload behavior\n     */\n    onFileUploadResponse: function onFileUploadResponse() {\n      return true;\n    },\n\n    /**\n     * Custom error handler. Runs after removing the placeholder text and before the alert().\n     * Return false from this function to prevent the alert dialog.\n     *\n     * @return {Boolean} when false is returned it will prevent default error behavior\n     */\n    onFileUploadError: function onFileUploadError() {\n      return true;\n    },\n\n    /**\n     * When a file has succesfully been uploaded\n     */\n    onFileUploaded: function onFileUploaded() {}\n    /**\n     * Uploads the blob\n     *\n     * @param  {Blob} file blob data received from event.dataTransfer object\n     * @return {XMLHttpRequest} request object which sends the file\n     */\n\n  };\n\n  inlineAttachment.prototype.uploadFile = function (file) {\n    var me = this;\n    var formData = new FormData();\n    var xhr = new XMLHttpRequest();\n    var settings = this.settings;\n    var extension = settings.defaultExtension || settings.defualtExtension;\n\n    if (typeof settings.setupFormData === 'function') {\n      settings.setupFormData(formData, file);\n    } // Attach the file. If coming from clipboard, add a default filename (only works in Chrome for now)\n    // http://stackoverflow.com/questions/6664967/how-to-give-a-blob-uploaded-as-formdata-a-file-name\n\n\n    if (file.name) {\n      var fileNameMatches = file.name.match(/\\.(.+)$/);\n\n      if (fileNameMatches) {\n        extension = fileNameMatches[1];\n      }\n    }\n\n    var remoteFilename = 'image-' + _Date$now() + '.' + extension;\n\n    if (typeof settings.remoteFilename === 'function') {\n      remoteFilename = settings.remoteFilename(file);\n    }\n\n    formData.append(settings.uploadFieldName, file, remoteFilename); // Append the extra parameters to the formdata\n\n    if (_typeof(settings.extraParams) === 'object') {\n      for (var key in settings.extraParams) {\n        if (settings.extraParams.hasOwnProperty(key)) {\n          formData.append(key, settings.extraParams[key]);\n        }\n      }\n    }\n\n    xhr.open('POST', settings.uploadUrl); // Add any available extra headers\n\n    if (_typeof(settings.extraHeaders) === 'object') {\n      for (var header in settings.extraHeaders) {\n        if (settings.extraHeaders.hasOwnProperty(header)) {\n          xhr.setRequestHeader(header, settings.extraHeaders[header]);\n        }\n      }\n    }\n\n    xhr.onload = function () {\n      // If HTTP status is OK or Created\n      if (xhr.status === 200 || xhr.status === 201) {\n        me.onFileUploadResponse(xhr);\n      } else {\n        me.onFileUploadError(xhr);\n      }\n    };\n\n    if (settings.beforeFileUpload(xhr) !== false) {\n      xhr.send(formData);\n    }\n\n    return xhr;\n  };\n  /**\n   * Returns if the given file is allowed to handle\n   *\n   * @param {File} clipboard data file\n   */\n\n\n  inlineAttachment.prototype.isFileAllowed = function (file) {\n    if (file.kind === 'string') {\n      return false;\n    }\n\n    if (this.settings.allowedTypes.indexOf('*') === 0) {\n      return true;\n    } else {\n      return this.settings.allowedTypes.indexOf(file.type) >= 0;\n    }\n  };\n  /**\n   * Handles upload response\n   *\n   * @param  {XMLHttpRequest} xhr\n   * @return {Void}\n   */\n\n\n  inlineAttachment.prototype.onFileUploadResponse = function (xhr) {\n    if (this.settings.onFileUploadResponse.call(this, xhr) !== false) {\n      var result = JSON.parse(xhr.responseText);\n      var filename = result[this.settings.jsonFieldName];\n\n      if (result && filename) {\n        var newValue;\n\n        if (typeof this.settings.urlText === 'function') {\n          newValue = this.settings.urlText.call(this, filename, result);\n        } else {\n          newValue = this.settings.urlText.replace(this.filenameTag, filename);\n        }\n\n        var text = this.editor.getValue().replace(this.lastValue, newValue);\n        this.editor.setValue(text);\n        this.settings.onFileUploaded.call(this, filename);\n      }\n    }\n  };\n  /**\n   * Called when a file has failed to upload\n   *\n   * @param  {XMLHttpRequest} xhr\n   * @return {Void}\n   */\n\n\n  inlineAttachment.prototype.onFileUploadError = function (xhr) {\n    if (this.settings.onFileUploadError.call(this, xhr) !== false) {\n      var text = this.editor.getValue().replace(this.lastValue, this.settings.errorText);\n      this.editor.setValue(text);\n    }\n  };\n  /**\n   * Called when a file has been inserted, either by drop or paste\n   *\n   * @param  {File} file\n   * @return {Void}\n   */\n\n\n  inlineAttachment.prototype.onFileInserted = function (file) {\n    if (this.settings.onFileReceived.call(this, file) !== false) {\n      this.lastValue = this.settings.progressText;\n      this.editor.insertValue(this.lastValue);\n    }\n  };\n  /**\n   * Called when a paste event occured\n   * @param  {Event} e\n   * @return {Boolean} if the event was handled\n   */\n\n\n  inlineAttachment.prototype.onPaste = function (e) {\n    var result = false;\n    var clipboardData = e.clipboardData;\n    var items;\n\n    if (_typeof(clipboardData) === 'object') {\n      items = clipboardData.items || clipboardData.files || [];\n\n      for (var i = 0; i < items.length; i++) {\n        var item = items[i];\n\n        if (this.isFileAllowed(item)) {\n          result = true;\n          this.onFileInserted(item.getAsFile());\n          this.uploadFile(item.getAsFile());\n        }\n      }\n    }\n\n    if (result) {\n      e.preventDefault();\n    }\n\n    return result;\n  };\n  /**\n   * Called when a drop event occures\n   * @param  {Event} e\n   * @return {Boolean} if the event was handled\n   */\n\n\n  inlineAttachment.prototype.onDrop = function (e) {\n    var result = false;\n\n    for (var i = 0; i < e.dataTransfer.files.length; i++) {\n      var file = e.dataTransfer.files[i];\n\n      if (this.isFileAllowed(file)) {\n        result = true;\n        this.onFileInserted(file);\n        this.uploadFile(file);\n      }\n    }\n\n    return result;\n  };\n\n  window.inlineAttachment = inlineAttachment;\n})(document, window);",{"version":3,"sources":["/root/lockhash/web-app/src/components/editor/inline-attachment.js"],"names":["document","window","inlineAttachment","options","instance","settings","util","merge","defaults","editor","filenameTag","lastValue","editors","result","i","arguments","length","obj","k","hasOwnProperty","appendInItsOwnLine","previous","appended","replace","insertTextAtCursor","el","text","scrollPos","scrollTop","strPos","browser","range","selectionStart","selection","focus","createRange","moveStart","value","front","substring","back","moveEnd","select","selectionEnd","uploadUrl","uploadMethod","uploadFieldName","defaultExtension","jsonFieldName","allowedTypes","progressText","urlText","errorText","extraParams","extraHeaders","beforeFileUpload","onFileReceived","onFileUploadResponse","onFileUploadError","onFileUploaded","prototype","uploadFile","file","me","formData","FormData","xhr","XMLHttpRequest","extension","defualtExtension","setupFormData","name","fileNameMatches","match","remoteFilename","append","key","open","header","setRequestHeader","onload","status","send","isFileAllowed","kind","indexOf","type","call","JSON","parse","responseText","filename","newValue","getValue","setValue","onFileInserted","insertValue","onPaste","e","clipboardData","items","files","item","getAsFile","preventDefault","onDrop","dataTransfer"],"mappings":"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","sourcesContent":["/* jslint newcap: true */\n/* global XMLHttpRequest: false, FormData: false */\n/*\n * Inline Text Attachment\n *\n * Author: Roy van Kaathoven\n * Contact: ik@royvankaathoven.nl\n */\n(function (document, window) {\n  'use strict'\n\n  var inlineAttachment = function (options, instance) {\n    this.settings = inlineAttachment.util.merge(options, inlineAttachment.defaults)\n    this.editor = instance\n    this.filenameTag = '{filename}'\n    this.lastValue = null\n  }\n\n  /**\n   * Will holds the available editors\n   *\n   * @type {Object}\n   */\n  inlineAttachment.editors = {}\n\n  /**\n   * Utility functions\n   */\n  inlineAttachment.util = {\n\n    /**\n     * Simple function to merge the given objects\n     *\n     * @param {Object[]} object Multiple object parameters\n     * @returns {Object}\n     */\n    merge: function () {\n      var result = {}\n      for (var i = arguments.length - 1; i >= 0; i--) {\n        var obj = arguments[i]\n        for (var k in obj) {\n          if (obj.hasOwnProperty(k)) {\n            result[k] = obj[k]\n          }\n        }\n      }\n      return result\n    },\n\n    /**\n     * Append a line of text at the bottom, ensuring there aren't unnecessary newlines\n     *\n     * @param {String} appended Current content\n     * @param {String} previous Value which should be appended after the current content\n     */\n    appendInItsOwnLine: function (previous, appended) {\n      return (previous + '\\n\\n[[D]]' + appended)\n        .replace(/(\\n{2,})\\[\\[D\\]\\]/, '\\n\\n')\n        .replace(/^(\\n*)/, '')\n    },\n\n    /**\n     * Inserts the given value at the current cursor position of the textarea element\n     *\n     * @param  {HtmlElement} el\n     * @param  {String} value Text which will be inserted at the cursor position\n     */\n    insertTextAtCursor: function (el, text) {\n      var scrollPos = el.scrollTop\n\n      var strPos = 0\n\n      var browser = false\n\n      var range\n\n      if ((el.selectionStart || el.selectionStart === '0')) {\n        browser = 'ff'\n      } else if (document.selection) {\n        browser = 'ie'\n      }\n\n      if (browser === 'ie') {\n        el.focus()\n        range = document.selection.createRange()\n        range.moveStart('character', -el.value.length)\n        strPos = range.text.length\n      } else if (browser === 'ff') {\n        strPos = el.selectionStart\n      }\n\n      var front = (el.value).substring(0, strPos)\n      var back = (el.value).substring(strPos, el.value.length)\n      el.value = front + text + back\n      strPos = strPos + text.length\n      if (browser === 'ie') {\n        el.focus()\n        range = document.selection.createRange()\n        range.moveStart('character', -el.value.length)\n        range.moveStart('character', strPos)\n        range.moveEnd('character', 0)\n        range.select()\n      } else if (browser === 'ff') {\n        el.selectionStart = strPos\n        el.selectionEnd = strPos\n        el.focus()\n      }\n      el.scrollTop = scrollPos\n    }\n  }\n\n  /**\n   * Default configuration options\n   *\n   * @type {Object}\n   */\n  inlineAttachment.defaults = {\n    /**\n     * URL where the file will be send\n     */\n    uploadUrl: 'upload_attachment.php',\n\n    /**\n     * Which method will be used to send the file to the upload URL\n     */\n    uploadMethod: 'POST',\n\n    /**\n     * Name in which the file will be placed\n     */\n    uploadFieldName: 'file',\n\n    /**\n     * Extension which will be used when a file extension could not\n     * be detected\n     */\n    defaultExtension: 'png',\n\n    /**\n     * JSON field which refers to the uploaded file URL\n     */\n    jsonFieldName: 'filename',\n\n    /**\n     * Allowed MIME types\n     */\n    allowedTypes: [\n      'image/jpeg',\n      'image/png',\n      'image/jpg',\n      'image/gif'\n    ],\n\n    /**\n     * Text which will be inserted when dropping or pasting a file.\n     * Acts as a placeholder which will be replaced when the file is done with uploading\n     */\n    progressText: '![Uploading file...]()',\n\n    /**\n     * When a file has successfully been uploaded the progressText\n     * will be replaced by the urlText, the {filename} tag will be replaced\n     * by the filename that has been returned by the server\n     */\n    urlText: '![file]({filename})',\n\n    /**\n     * Text which will be used when uploading has failed\n     */\n    errorText: 'Error uploading file',\n\n    /**\n     * Extra parameters which will be send when uploading a file\n     */\n    extraParams: {},\n\n    /**\n     * Extra headers which will be send when uploading a file\n     */\n    extraHeaders: {},\n\n    /**\n     * Before the file is send\n     */\n    beforeFileUpload: function () {\n      return true\n    },\n\n    /**\n     * Triggers when a file is dropped or pasted\n     */\n    onFileReceived: function () {},\n\n    /**\n     * Custom upload handler\n     *\n     * @return {Boolean} when false is returned it will prevent default upload behavior\n     */\n    onFileUploadResponse: function () {\n      return true\n    },\n\n    /**\n     * Custom error handler. Runs after removing the placeholder text and before the alert().\n     * Return false from this function to prevent the alert dialog.\n     *\n     * @return {Boolean} when false is returned it will prevent default error behavior\n     */\n    onFileUploadError: function () {\n      return true\n    },\n\n    /**\n     * When a file has succesfully been uploaded\n     */\n    onFileUploaded: function () {}\n  }\n\n  /**\n   * Uploads the blob\n   *\n   * @param  {Blob} file blob data received from event.dataTransfer object\n   * @return {XMLHttpRequest} request object which sends the file\n   */\n  inlineAttachment.prototype.uploadFile = function (file) {\n    var me = this\n\n    var formData = new FormData()\n\n    var xhr = new XMLHttpRequest()\n\n    var settings = this.settings\n\n    var extension = settings.defaultExtension || settings.defualtExtension\n\n    if (typeof settings.setupFormData === 'function') {\n      settings.setupFormData(formData, file)\n    }\n\n    // Attach the file. If coming from clipboard, add a default filename (only works in Chrome for now)\n    // http://stackoverflow.com/questions/6664967/how-to-give-a-blob-uploaded-as-formdata-a-file-name\n    if (file.name) {\n      var fileNameMatches = file.name.match(/\\.(.+)$/)\n      if (fileNameMatches) {\n        extension = fileNameMatches[1]\n      }\n    }\n\n    var remoteFilename = 'image-' + Date.now() + '.' + extension\n    if (typeof settings.remoteFilename === 'function') {\n      remoteFilename = settings.remoteFilename(file)\n    }\n\n    formData.append(settings.uploadFieldName, file, remoteFilename)\n\n    // Append the extra parameters to the formdata\n    if (typeof settings.extraParams === 'object') {\n      for (var key in settings.extraParams) {\n        if (settings.extraParams.hasOwnProperty(key)) {\n          formData.append(key, settings.extraParams[key])\n        }\n      }\n    }\n\n    xhr.open('POST', settings.uploadUrl)\n\n    // Add any available extra headers\n    if (typeof settings.extraHeaders === 'object') {\n      for (var header in settings.extraHeaders) {\n        if (settings.extraHeaders.hasOwnProperty(header)) {\n          xhr.setRequestHeader(header, settings.extraHeaders[header])\n        }\n      }\n    }\n\n    xhr.onload = function () {\n      // If HTTP status is OK or Created\n      if (xhr.status === 200 || xhr.status === 201) {\n        me.onFileUploadResponse(xhr)\n      } else {\n        me.onFileUploadError(xhr)\n      }\n    }\n    if (settings.beforeFileUpload(xhr) !== false) {\n      xhr.send(formData)\n    }\n    return xhr\n  }\n\n  /**\n   * Returns if the given file is allowed to handle\n   *\n   * @param {File} clipboard data file\n   */\n  inlineAttachment.prototype.isFileAllowed = function (file) {\n    if (file.kind === 'string') { return false }\n    if (this.settings.allowedTypes.indexOf('*') === 0) {\n      return true\n    } else {\n      return this.settings.allowedTypes.indexOf(file.type) >= 0\n    }\n  }\n\n  /**\n   * Handles upload response\n   *\n   * @param  {XMLHttpRequest} xhr\n   * @return {Void}\n   */\n  inlineAttachment.prototype.onFileUploadResponse = function (xhr) {\n    if (this.settings.onFileUploadResponse.call(this, xhr) !== false) {\n      var result = JSON.parse(xhr.responseText)\n\n      var filename = result[this.settings.jsonFieldName]\n\n      if (result && filename) {\n        var newValue\n        if (typeof this.settings.urlText === 'function') {\n          newValue = this.settings.urlText.call(this, filename, result)\n        } else {\n          newValue = this.settings.urlText.replace(this.filenameTag, filename)\n        }\n        var text = this.editor.getValue().replace(this.lastValue, newValue)\n        this.editor.setValue(text)\n        this.settings.onFileUploaded.call(this, filename)\n      }\n    }\n  }\n\n  /**\n   * Called when a file has failed to upload\n   *\n   * @param  {XMLHttpRequest} xhr\n   * @return {Void}\n   */\n  inlineAttachment.prototype.onFileUploadError = function (xhr) {\n    if (this.settings.onFileUploadError.call(this, xhr) !== false) {\n      var text = this.editor.getValue().replace(this.lastValue, this.settings.errorText)\n      this.editor.setValue(text)\n    }\n  }\n\n  /**\n   * Called when a file has been inserted, either by drop or paste\n   *\n   * @param  {File} file\n   * @return {Void}\n   */\n  inlineAttachment.prototype.onFileInserted = function (file) {\n    if (this.settings.onFileReceived.call(this, file) !== false) {\n      this.lastValue = this.settings.progressText\n      this.editor.insertValue(this.lastValue)\n    }\n  }\n\n  /**\n   * Called when a paste event occured\n   * @param  {Event} e\n   * @return {Boolean} if the event was handled\n   */\n  inlineAttachment.prototype.onPaste = function (e) {\n    var result = false\n\n    var clipboardData = e.clipboardData\n\n    var items\n\n    if (typeof clipboardData === 'object') {\n      items = clipboardData.items || clipboardData.files || []\n\n      for (var i = 0; i < items.length; i++) {\n        var item = items[i]\n        if (this.isFileAllowed(item)) {\n          result = true\n          this.onFileInserted(item.getAsFile())\n          this.uploadFile(item.getAsFile())\n        }\n      }\n    }\n\n    if (result) { e.preventDefault() }\n\n    return result\n  }\n\n  /**\n   * Called when a drop event occures\n   * @param  {Event} e\n   * @return {Boolean} if the event was handled\n   */\n  inlineAttachment.prototype.onDrop = function (e) {\n    var result = false\n    for (var i = 0; i < e.dataTransfer.files.length; i++) {\n      var file = e.dataTransfer.files[i]\n      if (this.isFileAllowed(file)) {\n        result = true\n        this.onFileInserted(file)\n        this.uploadFile(file)\n      }\n    }\n\n    return result\n  }\n\n  window.inlineAttachment = inlineAttachment\n})(document, window)\n"]}]}